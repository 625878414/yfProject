<style scoped lang="less">
.dataStandard {
  display: flex;
  justify-content: flex-start;
  width: 100%;
  background-color: #f2f7fa;
  /deep/ .ant-spin-nested-loading > div > .ant-spin .ant-spin-dot {
    top: 200px;
  }
}
.catalog {
  background-color: #fff;
  width: 15%;
  margin-left: 1.429rem;
  margin-top: 1.429rem;
  margin-right: 1.429rem;
  text-align: center;
  min-width: 20.571rem;
  height: 95%;
  box-shadow: 1px 1px 5px #6da2c0;
  .bar {
    width: 100%;
    padding: 1.429rem;
    // margin: 0 auto;
    // height: 5.571rem;
    text-align: left;
    position: relative;
    span:first-child {
      margin-right: 0.714rem;
      margin-left: 0.714rem;
      width: 10.714rem;
    }
    .add {
      position: absolute;
      top: 1.857rem;
    }
  }
}
.table {
  background-color: #fff;
  margin-top: 1.429rem;
  width: 82%;
  height: 95%;
  box-shadow: 1px 1px 5px #6da2c0;
}
.tree {
  width: 65%;
  margin-bottom: 0.714rem;
  margin-left: 1.429rem;
  .ant-tree {
    font-size: 1.071rem;
    margin-left: 1.429rem;
    /deep/.ant-tree-node-content-wrapper.ant-tree-node-selected {
      background-color: #fff;
      // color: #0aa1ed;
    }
    /deep/.ant-tree-node-content-wrapper:hover {
      background-color: #fff;
      color: #0aa1ed;
    }
  }
  /deep/.ant-tree.ant-tree-show-line li {
    text-align: left;
  }
}

.action {
  .title {
    width: 7.143rem;
    display: inline-block;
    text-align: left;
    color: rgba(0, 0, 0, 0.65);
    &:hover {
      color: #0aa1ed;
    }
  }
  .icon1 {
    // margin-left: 2.143rem;
    color: #a3a3a3;
  }
  .icon1:hover {
    color: #0aa1ed;
  }
}
.icon {
  width: 10rem;
  text-align: left;
}
.icon_close :hover {
  color: #0aa1ed;
}
.icon_check :hover {
  color: #0aa1ed;
}
.icon_close,
.icon_check {
  color: #a3a3a3;
  margin-right: 0.357rem;
}
.editInput {
  padding: 0;
  margin-right: 5px;
  height: 24px;
}
.icon .point {
  display: none;
}
.icon:hover .point {
  display: inline-block;
}
.point {
  margin-left: 1.429rem;
}
.catalog_title {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  width: 11.429rem;
}
.status {
  display: inline-block;
  /* width: 10px;
  height: 10px; */
  width: 30px;
  height: 30px;
  border-radius: 50%;
  background-color: #e8e8e8;
  line-height: 30px;
  text-align: center;
  cursor: pointer;
  margin-left: 5px;
  margin-right: 5px;
  user-select: none;
}
</style>
<template>
  <div class="dataStandard" :style="'height:' + bodyHeight + 'px'">
    <!-- 左侧目录 -->
    <div class="catalog">
      <!-- 目录的新增和搜索 -->
      <div class="bar">
        <span>
          <a-input-search
            v-model="searchStr"
            placeholder="输入搜选项"
            @search="onSearch"
          ></a-input-search>
        </span>
        <span class="add">
          <a-icon
            type="plus-circle"
            style="font-size: 20px"
            @click="addFirstItem"
          ></a-icon>
        </span>
      </div>
      <!-- 树形控件 -->
      <a-spin :spinning="treeLoading" class="treeLoading">
        <vue-scroll :style="'height:' + (bodyHeight - 120) + 'px'">
          <div class="tree" :style="'height:' + (bodyHeight - 130) + 'px'">
            <a-tree
              v-model="checkedKeys"
              :treeData="treeSource"
              :selectedKeys="selectedKeys"
              :expandedKeys="expandedKeys"
              @expand="onExpand"
              :autoExpandParent="autoExpandParent"
              :replaceFields="replaceFields"
              @select="onSelect"
              @onCheck="onCheck"
              show-line
            >
              <a-icon slot="icon" type="carry-out" />
              <!-- 插槽名称写死为custom,需要传入的treeSource中需要用到自定义插槽的对象中增加scopedSlots: { title: "custom" }属性 -->
              <template slot="custom" slot-scope="item">
                <span v-if="item.isEdit">
                  <a-input
                    ref="new"
                    type="text"
                    class="editInput"
                    v-model.trim="newItem"
                    @pressEnter="addConfirm(item)"
                    :maxLength="8"
                    placeholder="目录最多8个字符"
                  />
                  <a-icon
                    type="close-circle"
                    @click="addCancel(item)"
                    style="margin-right: 10px"
                  />
                  <a-icon type="check-circle" @click="addConfirm(item)" />
                </span>
                <div v-else>
                  <div class="icon">
                    <!-- <span class="title">{{ item.title }}</span> -->
                    <span
                      v-html="
                        item.name.replace(
                          new RegExp(searchValue, 'g'),
                          '<span style=color:#f50>' + searchValue + '</span>'
                        )
                      "
                      class="catalog_title"
                    ></span>
                    <span class="point">
                      <a-dropdown>
                        <img src="./assets/icon/point.png" alt="" srcset="" />
                        <a-menu slot="overlay">
                          <a-menu-item @click="addItem(item)">
                            <a-icon type="plus" />
                            <span>新增</span>
                          </a-menu-item>
                          <a-menu-item @click="editItem(item)">
                            <a-icon type="edit" />
                            <span>修改</span>
                          </a-menu-item>
                          <a-menu-item @click="deleteItem(item)">
                            <a-icon type="delete" />
                            <span>删除</span>
                          </a-menu-item>
                        </a-menu>
                      </a-dropdown>
                    </span>
                  </div>
                </div>
              </template>
            </a-tree>
          </div>
        </vue-scroll>
      </a-spin>
    </div>
    <!-- 右侧表格-->
    <div class="table">
      <div class="les-table-toolbar">
        <a-button-group>
          <a-button type="primary" icon="plus" @click="addStandard">
            新增
          </a-button>
        </a-button-group>
        <div>
          <a-input
            placeholder="名称"
            :maxLength="10"
            style="width: 150px; margin-right: 5px"
            allowClear
          >
            <a-icon slot="suffix" type="search" />
          </a-input>
        </div>
      </div>
      <vue-scroll :style="'height:' + (bodyHeight - 150) + 'px;'">
        <a-table
          style="width: 100%"
          :columns="columns"
          :data-source="tableData"
          :pagination="false"
          size="small"
          :rowKey="(record) => record.nameCn"
        >
          <template slot="action">
            <a-button
              style="margin-right: 5px"
              type="primary"
              icon="edit"
              size="small"
              >编辑</a-button
            >
            <a-button type="danger" icon="delete" size="small">删除</a-button>
          </template>
        </a-table>
      </vue-scroll>
      <a-pagination
        :defaultPageSize="20"
        style="text-align: right; margin: 10px"
      >
      </a-pagination>
    </div>
    <!-- 模态表单 -->
    <a-modal v-model="modalVisible" :title="modalTitle" :width="690">
      <template slot="footer">
        <a-button @click="handleCancel"> 返回 </a-button>
        <a-button type="primary" @click="saveStandard('0')"> 保存 </a-button>
        <a-button type="primary" @click="saveStandard('1')"> 发布 </a-button>
      </template>
      <!-- 选项卡 -->
      <div v-if="modalVisible">
        <a-tabs  v-model="tabKey">
          <a-tab-pane key="1" tab="元数据标准">
            <p>基础属性</p>
            <a-form-model
              layout="horizontal"
              :label-col="{ span: 6 }"
              :wrapper-col="{ span: 14 }"
              :model="formData"
              :rules="ruleValidate"
              ref="formModel"
            >
              <a-form-model-item label="英文名称" prop="name">
                <a-input
                  placeholder="最多输入20个字符"
                  :maxLength="20"
                  v-model="formData.name"
                />
              </a-form-model-item>
              <a-form-model-item label="中文名称" prop="nameCn">
                <a-input
                  placeholder="最多输入20个字符"
                  :maxLength="20"
                  v-model="formData.nameCn"
                />
              </a-form-model-item>
              <a-form-model-item label="数据类型" prop="dataType">
                <a-select placeholder="请选择来源" v-model="formData.dataType">
                  <a-select-option value="STRING"> STRING </a-select-option>
                  <a-select-option value="INT"> INT </a-select-option>
                  <a-select-option value="DATE"> DATE </a-select-option>
                  <a-select-option value="FLOAT"> FLOAT </a-select-option>
                </a-select>
              </a-form-model-item>
              <a-form-model-item label="标准目录" prop="catalogId1">
                <a-cascader
                  :options="options"
                  change-on-select
                  placeholder="请选择目录"
                  v-model="formData.catalogId1"
                />
              </a-form-model-item>
              <a-form-model-item label="业务定义">
                <a-textarea :rows="'3'" v-model="formData.businessDefinition">
                </a-textarea>
              </a-form-model-item>
            </a-form-model>
          </a-tab-pane>
          <a-tab-pane key="2" tab="数据标准">
            <a-form-model
              layout="horizontal"
              :label-col="{ span: 5 }"
              :wrapper-col="{ span: 14 }"
              :model="formData"
            >
              <a-form-model-item label="是否允许空值">
                <a-radio-group v-model="formData.nullable">
                  <a-radio value="1"> 可空 </a-radio>
                  <a-radio value="0"> 不可空 </a-radio>
                </a-radio-group>
              </a-form-model-item>
              <a-form-model-item label="是否允许重复">
                <a-radio-group v-model="formData.repeatable">
                  <a-radio value="1"> 可重复 </a-radio>
                  <a-radio value="0"> 不可重复 </a-radio>
                </a-radio-group>
              </a-form-model-item>
              <a-form-model-item
                label="取值范围"
                :label-col="{ span: 4 }"
                :wrapper-col="{ span: 20 }"
              >
                <a-select
                  style="width: 140px"
                  placeholder="请选择运算符"
                  v-model="formData.valueRange.postOperator"
                >
                  <a-select-option value="="> = </a-select-option>
                  <a-select-option value="<"> &lt; </a-select-option>
                  <a-select-option value=">"> &gt; </a-select-option>
                </a-select>
                <a-input
                  placeholder="输入数值"
                  style="width: 80px; margin-left: 5px"
                  v-model="formData.valueRange.postValue"
                ></a-input>
                <span @click="statusChange" class="status">{{
                  formData.valueRange.relationType == "0"
                    ? "关"
                    : formData.valueRange.relationType == "1"
                    ? "或"
                    : "且"
                }}</span>
                <a-select
                  style="width: 140px"
                  v-model="formData.valueRange.preOperator"
                  placeholder="请选择运算符"
                >
                  <a-select-option value="="> = </a-select-option>
                  <a-select-option value="<"> &lt; </a-select-option>
                  <a-select-option value=">"> &gt; </a-select-option>
                </a-select>
                <a-input
                  placeholder="输入数值"
                  style="width: 80px; margin-left: 5px"
                  v-model="formData.valueRange.preValue"
                ></a-input>
              </a-form-model-item>
            </a-form-model>
            <h3 style="padding-left: 20px; padding-bottom: 20px">枚举范围:</h3>
            <vue-scroll style="height: 250px">
              <a-table
                :columns="eColumns"
                :data-source="eData"
                bordered
                rowKey="key"
                :pagination="false"
              >
                <template
                  v-for="col in ['enumValue', 'enumMeaning']"
                  :slot="col"
                  slot-scope="text, record"
                >
                  <div :key="col">
                    <a-input
                      v-if="record.editable"
                      style="margin: -5px 0"
                      :value="text"
                      @change="
                        (e) => tableValueChange(e.target.value, record.key, col)
                      "
                    />
                    <template v-else>
                      {{ text }}
                    </template>
                  </div>
                </template>
                <template slot="operation" slot-scope="text, record">
                  <div class="editable-row-operations">
                    <span v-if="record.editable">
                      <a-button
                        size="small"
                        type="primary"
                        @click="() => saveRow(record)"
                        :loading="btnLoading"
                        >保存</a-button
                      >
                      <a-popconfirm
                        title="确认取消吗?"
                        @confirm="() => cancelRow(record)"
                      >
                        <a-button
                          type="danger"
                          size="small"
                          style="margin-left: 5px"
                          >取消</a-button
                        >
                      </a-popconfirm>
                    </span>
                    <span v-else>
                      <a-button
                        :disabled="editingKey !== ''"
                        @click="() => editRow(record.key)"
                        size="small"
                        type="primary"
                        icon="edit"
                        >编辑</a-button
                      >
                      <a-button
                        @click="deleteRow(record.key)"
                        size="small"
                        type="danger"
                        icon="delete"
                        style="margin-left: 5px"
                        >删除</a-button
                      >
                    </span>
                  </div>
                </template>
              </a-table>
            </vue-scroll>
            <a-button @click="addRow" icon="plus" type="primary"
              >添加属性</a-button
            >
          </a-tab-pane>
        </a-tabs>
      </div>
    </a-modal>
  </div>
</template>

<script>
const url = "/zuul/lmanage";
const eColumns = [
  {
    title: "枚举值",
    dataIndex: "enumValue",
    width: "30%",
    scopedSlots: { customRender: "enumValue" },
  },
  {
    title: "枚举含义",
    dataIndex: "enumMeaning",
    width: "40%",
    scopedSlots: { customRender: "enumMeaning" },
  },
  {
    title: "操作",
    dataIndex: "operation",
    scopedSlots: { customRender: "operation" },
  },
];
var numbe = 0;
const eData = [];
export default {
  name: "dataStandard",
  data() {
    this.cacheData = eData.map((item) => ({ ...item }));
    return {
      treeSource: [
        {
          name: "主数据标准",
          id: "1",
          scopedSlots: { title: "custom" },
          isEdit: false,
          children: [
            {
              name: "主数据标准1",
              id: "1-1",
              level: 1,
              scopedSlots: { title: "custom" },
              isEdit: false,
              children: [],
            },
            {
              name: "主数据标准2",
              id: "1-2",
              level: 2,
              scopedSlots: { title: "custom" },
              isEdit: false,
              children: [],
            },
            {
              name: "主数据标准3",
              id: "1-3",
              scopedSlots: { title: "custom" },
              isEdit: false,
              level: 2,
              children: [],
            },
            {
              name: "主数据标准4",
              id: "1-4",
              scopedSlots: { title: "custom" },
              isEdit: false,
              level: 2,
              children: [],
            },
          ],
        },
        {
          name: "维数据标准",
          id: "2",
          scopedSlots: { title: "custom" },
          isEdit: false,
          level: 1,
          children: [
            {
              name: "维数据标准1",
              id: "2-1",
              scopedSlots: { title: "custom" },
              isEdit: false,
              level: 2,
              children: [
                {
                  name: "维数据标准1-1",
                  id: "2-1-1",
                  scopedSlots: { title: "custom" },
                  isEdit: false,
                  level: 3,
                  children: [],
                },
                {
                  name: "维数据标准1-2",
                  id: "2-1-2",
                  scopedSlots: { title: "custom" },
                  isEdit: false,
                  level: 3,
                  children: [],
                },
                {
                  name: "维数据标准1-3",
                  id: "2-1-3",
                  scopedSlots: { title: "custom" },
                  isEdit: false,
                  level: 3,
                  children: [],
                },
              ],
            },
            {
              name: "维数据标准2",
              id: "2-2",
              scopedSlots: { title: "custom" },
              isEdit: false,
              level: 2,
              children: [],
            },
            {
              name: "维数据标准3",
              id: "2-3",
              scopedSlots: { title: "custom" },
              isEdit: false,
              level: 2,
              children: [],
            },
            {
              name: "维数据标准4",
              id: "2-4",
              scopedSlots: { title: "custom" },
              isEdit: false,
              level: 2,
              children: [],
            },
            {
              name: "维数据标准5",
              id: "2-5",
              scopedSlots: { title: "custom" },
              isEdit: false,
              level: 2,
              children: [],
            },
          ],
        },
        {
          name: "公共维标准",
          id: "3",
          scopedSlots: { title: "custom" },
          isEdit: false,
          level: 1,
          children: [
            {
              name: "公共维标准",
              id: "3-1",
              scopedSlots: { title: "custom" },
              isEdit: false,
              level: 2,
              children: [],
            },
            {
              name: "公共维标准",
              id: "3-2",
              scopedSlots: { title: "custom" },
              isEdit: false,
              level: 2,
              children: [],
            },
            {
              name: "公共维标准",
              id: "3-3",
              scopedSlots: { title: "custom" },
              isEdit: false,
              level: 2,
              children: [],
            },
            {
              name: "公共维标准",
              id: "3-4",
              scopedSlots: { title: "custom" },
              isEdit: false,
              level: 2,
              children: [],
            },
          ],
        },
        {
          name: "业务数据标准",
          id: "4",
          scopedSlots: { title: "custom" },
          isEdit: false,
          level: 1,
          children: [
            {
              name: "业务数据标准1",
              id: "4-1",
              scopedSlots: { title: "custom" },
              isEdit: false,
              level: 2,
              children: [],
            },
            {
              name: "业务数据标准2",
              id: "4-2",
              scopedSlots: { title: "custom" },
              isEdit: false,
              level: 2,
              children: [],
            },
            {
              name: "业务数据标准3",
              id: "4-3",
              scopedSlots: { title: "custom" },
              isEdit: false,
              level: 2,
              children: [],
            },
            {
              name: "业务数据标准4",
              id: "4-4",
              scopedSlots: { title: "custom" },
              isEdit: false,
              level: 2,
              children: [],
            },
          ],
        },
        {
          name: "数据质量",
          id: "5",
          scopedSlots: { title: "custom" },
          isEdit: false,
          level: 1,
          children: [
            {
              name: "数据质量1",
              id: "5-1",
              scopedSlots: { title: "custom" },
              isEdit: false,
              level: 2,
              children: [],
            },
            {
              name: "数据质量2",
              id: "5-2",
              scopedSlots: { title: "custom" },
              isEdit: false,
              level: 2,
              children: [],
            },
            {
              name: "数据质量3",
              id: "5-3",
              scopedSlots: { title: "custom" },
              isEdit: false,
              level: 2,
              children: [],
            },
            {
              name: "数据质量4",
              id: "5-4",
              scopedSlots: { title: "custom" },
              isEdit: false,
              level: 2,
              children: [],
            },
          ],
        },
      ],
      // treeSource: [],
      expandedKeys: [],
      newItem: "",
      editFlag: false, // 记录是否有已经处于编辑状态的标识
      newFlag: false, // 记录是否是新建节点，用于在cancel的时候判断是该删除还是恢复原样
      backupsExpandedKeys: [],
      autoExpandParent: false,
      checkedKeys: [],
      selectedKeys: [],
      searchValue: "",
      searchStr: "",
      replaceFields: { title: "name", key: "id" },
      tableData: [
        {
          nameCn: "号牌号码",
          name: "PLATE_NO",
          businessDefinition: "号牌号码字段，一般为身份简称打头....",
          standardStatus: "0",
          created: "2021-07-02 14:21:22",
        },
        {
          nameCn: "反偷渡检测",
          name: "antistowcheckplace",
          businessDefinition: "反偷渡",
          standardStatus: "1",
          created: "2021-07-02 14:21:22",
        },
        {
          nameCn: "航线代码",
          name: "ServiceCode",
          businessDefinition: "航线代码",
          standardStatus: "1",
          created: "2021-08-05 17:38:14",
        },
        {
          nameCn: "航线代码1",
          name: "ServiceCode",
          businessDefinition: "航线代码1",
          standardStatus: "1",
          created: "2021-08-05 17:38:14",
        },
      ],
      columns: [
        {
          dataIndex: "index",
          title: "序号",
          align: "center",
          // width: 50,
          customRender: (text, record, index) => index + 1,
        },
        {
          dataIndex: "nameCn",
          title: "中文名称",
          align: "center",
          // width: "auto",
        },
        {
          dataIndex: "name",
          title: "英文名称",
          align: "center",
          // width: 50,
        },
        {
          dataIndex: "businessDefinition",
          title: "业务定义",
          align: "center",
          // width: 50,
        },
        {
          dataIndex: "standardStatus",
          title: "状态",
          align: "center",
          // width: 50,
          customRender: (text) =>
            text == "0" ? (
              <a-badge status="error" text="未发布" />
            ) : (
              <a-badge status="success" text="已发布" />
            ),
        },
        {
          title: "操作",
          key: "action",
          width: 180,
          scopedSlots: { customRender: "action" },
          align: "center",
        },
      ],
      modalVisible: false,
      modalTitle: "新增",
      catalogData: {
        parentId: "",
        parentIds: "",
        level: "",
        id: "",
        name: "",
      },
      treeLoading: false,
      options: [],
      eData,
      eColumns,
      editingKey: "",
      formData: {
        valueRange: {
          postOperator: undefined,
          postValue: "",
          preValue: "",
          relationType: "0",
          preOperator: undefined,
        },
        customAttribute: null,
        standardStatus: "0",
        catalogId1:[]
      },
      isAdd: false,
      catalogId: "",
      isNewValue: false,
      ruleValidate: {
        name: [{ required: true, message: "必填", trigger: "change" }],
        nameCn: [{ required: true, message: "必填", trigger: "change" }],
        catalogId: [{ required: true, message: "必填", trigger: "change" }],
        dataType: [{ required: true, message: "必填", trigger: "change" }],
      },
      tabKey: "1",
      keyArr: [],
      valueArr: [],
      btnLoading:false
    };
  },
  methods: {
    //添加顶级目录
    addFirstItem() {
      if (this.editFlag) {
        this.$message.warning("已有编辑项，请先编辑完成！");
        return;
      }
      this.treeSource.push({
        children: [],
        // id: this.getItemNextId(),
        name: "",
        // level: 1,
        scopedSlots: { title: "custom" },
        isEdit: true,
      });
      this.catalogInit();
      this.newItem = "";
      this.editFlag = true;
      this.newFlag = true;
      this.$nextTick(() => {
        this.$refs.new.focus();
      });
      this.catalogData.parentId = "";
      this.catalogData.parentIds = "";
      this.catalogData.level = "1";
    },
    //添加子集
    addItem(item) {
      if (this.editFlag) {
        this.$message.warning("已有编辑项，请先编辑完成！");
        return;
      } else if (item.level == "3") {
        this.$message.warning("最多允许3级目录");
        return;
      }
      item.children.push({
        children: [],
        // id: this.getItemNextId(),
        name: "",
        // level: item.level + 1,
        scopedSlots: { title: "custom" },
        isEdit: true,
      });
      this.catalogInit();
      this.catalogData.parentId = item.id;
      (this.catalogData.parentIds = item.parentIds + "," + item.id),
        (this.catalogData.level = item.level * 1 + 1 + "");
      this.newItem = "";
      console.log(this.catalogData);
      this.editFlag = true;
      this.newFlag = true;
      this.expandedKeys.push(item.id);
      this.$nextTick(() => {
        this.$refs.new.focus();
      });
    },
    //编辑目录
    editItem(item) {
      console.log(item);
      if (this.editFlag) {
        this.$message.warning("已有编辑项，请先编辑完成！");
        return;
      }
      item.isEdit = true;
      this.newFlag = false;
      this.editFlag = true;
      this.newItem = item.name;
      this.$http.get(url + "/dataStandard/catalog/" + item.id).then((res) => {
        this.catalogData = res.data.data;
      });
      this.treeListItemActions(this.treeSource, item.id, "edit", item);
      this.$nextTick(() => {
        this.$refs.new.focus();
      });
    },
    //删除目录
    deleteItem(item) {
      let that = this;
      this.$confirm({
        title: "操作提示",
        content: (
          <span style="color:red">
            删除目录时,会同步删除目录下的子节点、数据标准及其映射结果,是否确认删除?
          </span>
        ),
        centered: true,
        okType: "danger",
        onOk() {
          // that.treeListItemActions(that.treeSource, item.id, "delete");
          that.treeLoading = true;
          that
            .$http({
              method: "delete",
              url:
                url +
                "/dataStandard/catalog/" +
                item.id +
                "?parentId=" +
                item.parentId,
            })
            .then((res) => {
              if (res.data.success) {
                that.$notification.success({
                  message: res.data.message,
                  duration: 2,
                });
                that.renderTree();
              } else {
                that.$notification.error({
                  message: res.data.message,
                  duration: 2,
                });
                that.treeLoading = false;
              }
            });
        },
        onCancel() {
          that.$message.info("已取消");
        },
      });
    },
    //取消编辑
    addCancel(item) {
      this.newItem = "";
      item.isEdit = false;
      this.editFlag = false;
      this.treeListItemActions(
        this.treeSource,
        item.id,
        this.newFlag ? "delete" : "edit",
        item
      );
    },
    //提交新增
    addConfirm(item) {
      if (this.newItem !== null && this.newItem.trim() !== "") {
        this.treeLoading = true;
        item.name = this.newItem;
        this.catalogData.name = this.newItem;
        item.isEdit = false;
        this.editFlag = false;
        this.treeListItemActions(this.treeSource, item.id, "edit", item);
        this.$http({
          method: "post",
          url: url + "/dataStandard/catalog/save",
          data: this.catalogData,
        }).then((res) => {
          if (res.data.success) {
            this.$notification.success({
              message: "操作成功",
              duration: 2,
            });
            this.renderTree();
          } else {
            this.$notification.success({
              message: "操作失败",
              duration: 2,
            });
          }
          this.treeLoading = false;
        });
      } else {
        this.$message.warning("不允许为空");
      }
    },
    // 获取新节点的id（时间戳加随机数）
    getItemNextId() {
      return (
        new Date().getTime() + Math.ceil(Math.random() * 10000)
      ).toString();
    },
    // 根据id属性从数组（树结构）中匹配元素，执行action操作
    treeListItemActions(treeList, key, action, item) {
      if (!treeList || !treeList.length) {
        return;
      }
      for (let i = 0; i < treeList.length; i++) {
        if (treeList[i].id === key) {
          if (action === "delete") {
            treeList.splice(i, 1);
            this.$forceUpdate();
          } else if (action === "edit") {
            treeList[i] = item;
            this.$forceUpdate();
          }
          break;
        }
        this.treeListItemActions(treeList[i].children, key, action, item);
      }
    },
    // 提供给调用方获取树的数据源的方法
    renderTree() {
      this.treeLoading = true;
      this.$http.get("/zuul/lmanage/dataStandard/catalog/tree").then((res) => {
        if (res.data.success) {
          this.treeSource = res.data.data;
        } else {
          this.$message.error("查询目录失败", 2);
        }
        this.treeLoading = false;
      });
      // console.log(123);
    },
    catalogInit() {
      this.catalogData = {
        parentId: "",
        parentIds: "",
        level: "",
        id: "",
        name: "",
      };
    },
    //根据目录名称搜索指定目录
    onSearch() {
      this.searchValue = this.searchStr;
      if (this.searchValue === "") {
        this.expandedKeys = [];
      } else {
        this.expandedKeys = [];
        this.backupsExpandedKeys = [];
        const candidateKeysList = this.getkeyList(
          this.searchValue,
          this.treeSource,
          []
        );
        candidateKeysList.forEach((item) => {
          const key = this.getParentKey(item, this.treeSource);
          // eslint-disable-next-line no-shadow
          if (key && !this.backupsExpandedKeys.some((item) => item === key))
            this.backupsExpandedKeys.push(key);
        });
        const { length } = this.backupsExpandedKeys;
        // eslint-disable-next-line no-plusplus
        for (let i = 0; i < length; i++) {
          this.getAllParentKey(this.backupsExpandedKeys[i], this.treeSource);
        }
        this.expandedKeys = this.backupsExpandedKeys.slice();
      }
    },
    // 获取节点中含有value的所有key集合
    getkeyList(value, tree, keyList) {
      // eslint-disable-next-line no-plusplus
      for (let i = 0; i < tree.length; i++) {
        const node = tree[i];
        if (node.name.indexOf(value) > -1) {
          keyList.push(node.id);
        }
        if (node.children) {
          this.getkeyList(value, node.children, keyList);
        }
      }
      return keyList;
    },
    // 该递归主要用于获取key的父亲节点的key值
    getParentKey(id, tree) {
      let parentKey;
      let temp;
      // eslint-disable-next-line no-plusplus
      for (let i = 0; i < tree.length; i++) {
        const node = tree[i];
        if (node.children) {
          if (node.children.some((item) => item.id === id)) {
            parentKey = node.id;
            // eslint-disable-next-line no-cond-assign
          } else if ((temp = this.getParentKey(id, node.children))) {
            parentKey = temp;
          }
        }
      }
      return parentKey;
    },
    // 获取该节点的所有祖先节点
    getAllParentKey(id, tree) {
      let parentKey;
      if (id) {
        parentKey = this.getParentKey(id, tree);
        if (parentKey) {
          if (!this.backupsExpandedKeys.some((item) => item === parentKey)) {
            this.backupsExpandedKeys.push(parentKey);
          }
          this.getAllParentKey(parentKey, tree);
        }
      }
    },
    onExpand(expandedKeys) {
      this.expandedKeys = expandedKeys;
      this.autoExpandParent = false;
    },
    onCheck(checkedKeys) {
      this.checkedKeys = checkedKeys;
    },
    onSelect(selectedKeys, info) {
      this.selectedKeys = selectedKeys;
    },
    //关闭模态框
    handleCancel(e) {
      this.modalVisible = false;
      this.$refs.formModel.resetFields();
      // this.tabKey = "1";
    },
    //新增目录
    addStandard() {
      // this.$refs.formModel.resetFields();
      this.formInit();
      this.eData=[];
      this.tabKey = "1";
      this.modalVisible = true;
    },
    //或且关状态切换
    statusChange() {
      this.formData.valueRange.relationType =
        this.formData.valueRange.relationType == "0"
          ? "1"
          : this.formData.valueRange.relationType == "1"
          ? "2"
          : "0";
    },
    //表格输入框值变化
    tableValueChange(value, key, column) {
      const newData = [...this.eData];
      const target = newData.filter((item) => key === item.key)[0];
      if (target) {
        target[column] = value;
        this.eData = newData;
      }
    },
    //编辑表格输入框
    editRow(key) {
      this.isNewValue = false;
      const newData = [...this.eData];
      const target = newData.filter((item) => key === item.key)[0];
      this.editingKey = key;
      if (target) {
        target.editable = true;
        this.eData = newData;
      }
    },
    //保存表格输入框
    saveRow(record) {
      if (record.enumMeaning == "" || record.enumValue == "") {
        this.$message.warning("请填写枚举值和含义", 2);
      } else {
        const newData = [...this.eData];
        // console.log(newData);
        console.log(this.keyArr);
        this.keyArr = [...new Set(this.keyArr)];
        this.valueArr = [...new Set(this.valueArr)];
        console.log(this.keyArr.includes(record.enumValue));
        if (
          this.keyArr.includes(record.enumValue) ||
          this.valueArr.includes(record.enumMeaning)
        ) {
          this.$message.warning("枚举值或含义可能重复,请检查!");
          return;
        }
        newData.forEach((item) => {
          this.keyArr.push(item.enumValue);
          this.valueArr.push(item.enumMeaning);
        });
        // console.log(keyArr.includes(record.enumValue));

        const newCacheData = [...this.cacheData];
        const target = newData.filter((item) => record.key === item.key)[0];
        const targetCache = newCacheData.filter(
          (item) => record.key === item.key
        )[0];
        if (target && targetCache) {
          delete target.editable;
          this.eData = newData;
          Object.assign(targetCache, target);
          this.cacheData = newCacheData;
        }
        this.editingKey = "";
        this.isAdd = false;
        this.isNewValue = false;
        console.log(this.eData);
      }
    },
    //取消表格输入框编辑
    cancelRow(record) {
      console.log(record);
      if (
        (record.enumMeaning == "" && record.enumValue == "") ||
        this.isNewValue
      ) {
        let currentIndex = this.eData.findIndex(
          (item) => item.key === record.key
        );
        console.log(currentIndex);
        this.eData.splice(currentIndex, 1);
        this.isAdd = false;
        this.editingKey = "";
      } else {
        const newData = [...this.eData];
        const target = newData.filter((item) => record.key === item.key)[0];
        this.editingKey = "";
        if (target) {
          Object.assign(
            target,
            this.cacheData.filter((item) => record.key === item.key)[0]
          );
          delete target.editable;
          this.eData = newData;
        }
      }
    },
    //新增表格输入框
    addRow() {
      if (this.isAdd) {
        this.$message.warning("请完成,再添加");
      } else {
        this.isAdd = true;
        this.isNewValue = true;
        this.eData.push({
          key: numbe.toString(),
          enumValue: "",
          enumMeaning: "",
          editable: true,
        });
        numbe++;
        console.log(this.eData);
        this.editingKey = this.eData[this.eData.length - 1].key;
        this.cacheData = this.eData.map((item) => ({ ...item }));
      }
    },
    //删除表格输入框
    deleteRow(key) {
      let currentIndex = this.eData.findIndex((item) => item.key === key);
      console.log(currentIndex);
      this.eData.splice(currentIndex, 1);
    },
    //保存新增数据标准
    saveStandard(standardStatus) {
      console.log(this.eData);
      this.$refs.formModel.validate((valid) => {
        if (valid) {
          this.btnLoading = false;
          this.formData.enumRange = [];
          this.formData.standardStatus = standardStatus;
          this.formData.catalogId=this.formData.catalogId1[this.formData.catalogId1.length-1];
          this.eData.forEach((item) => {
            this.formData.enumRange.push({
              key: item.enumValue,
              value: item.enumMeaning,
            });
          });
          this.formData.valueRange=JSON.stringify(this.formData.valueRange)
          this.formData.enumRange=JSON.stringify(this.formData.enumRange);
          this.$http({
            method:"post",
            data:this.formData,
            url:url+"/dataStandard/save"
          }).then(res=>{
            if (res.data.success) {
              this.$notification.success({
                message: "操作成功",
                duration: 2,
              });
              // this.currentPage = 1;
              this.btnLoading = false;
              this.modalVisible = false;
            } else {
              this.$notification.error({
                message: "操作失败",
                duration: 2,
              });
              this.formData.valueRange=JSON.parse(this.formData.valueRange)
          this.formData.enumRange=JSON.parse(this.formData.enumRange);
              this.btnLoading = false;
            }
          })
        }
      });
      // this.formData.valueRange=JSON.stringify(this.formData.valueRange)
      console.log(this.formData);
    },
    //表单重置
    formInit() {
      this.formData = {
        valueRange: {
          postOperator: undefined,
          postValue: "",
          preValue: "",
          relationType: "0",
          preOperator: undefined,
        },
        customAttribute: null,
        standardStatus: "0",
      };
    },
    //获取级联选择器的数据
    getCascader(){
      this.$http.get(url + "/dataStandard/parent/cascader").then((res) => {
      console.log(res);
      this.options = res.data.data;
    });
    }
  },
  mounted() {
    this.renderTree();
    this.getCascader()
  },
  computed: {
    bodyHeight() {
      return this.$store.state.app.bodyHeight;
    },
  },
};
</script>

