<template>
  <div>
    <div class="init">
      <p class="title ">
        <span>{{ isItInitialized ? "仓库信息" : "初始化仓库" }}</span>
        <span>Warehouse</span>
      </p>
      <div class="form" v-if="!isItInitialized">
        <a-form-model :model="formData" :label-col="{span:4}" :wrapperCol="{ span: 14, offset: 2 }" layout="horizontal" :rules="ruleValidate" ref="formModel">
          <a-form-model-item label="来源" prop="sourceType">
            <a-select v-model="formData.sourceType" placeholder="请选择来源" @change="typeChange">
              <a-select-option value="0">
                BigData
              </a-select-option>
              <a-select-option value="1">
                JDBC
              </a-select-option>
            </a-select>
          </a-form-model-item>
          <a-form-model-item label="用户名" prop="username">
            <a-input v-model="formData.username" placeholder="最多输入20个字符" :minLength="20" />
          </a-form-model-item>
          <a-form-model-item label="密码" prop="password">
            <a-input v-model="formData.password" placeholder="最多输入20个字符" :maxLength="20" />
          </a-form-model-item>
          <div style="position: relative;">
            <div v-if="isJDBC">
              <a-form-model-item prop="typeName" label="类型">
                <a-select v-model="formData.typeName" placeholder="请选择类型">
                  <a-select-option v-for="typeName in typeNameListOfJDBC" :key="typeName">{{
                    typeName
                  }}</a-select-option>
                </a-select>
              </a-form-model-item>
              <a-form-model-item label="驱动" prop="driverClassName">
                <a-select
                  v-model="formData.driverClassName"
                  placeholder="请选择驱动"
                  @change="diverClassNameChange"
                >
                  <a-select-option v-for="item in driverClassList" :value="item" :key="item">
                    {{ item }}
                  </a-select-option>
                </a-select>
                <a-button class="btn_connect" size="small" type="primary" @click="testing"
                  >连接测试</a-button
                >
              </a-form-model-item>
            </div>
            <div v-else>
              <a-form-model-item label="类型" prop="typeName">
                <a-select v-model="formData.typeName" placeholder="请选择类型">
                  <a-select-option
                    v-for="typeName in typeNameListOfBD"
                    :value="typeName"
                    :key="typeName"
                    >{{ typeName }}</a-select-option
                  >
                </a-select>
              </a-form-model-item>
              <a-form-model-item label="驱动" prop="authMethod">
                <a-select v-model="formData.authMethod" placeholder="请选择驱动">
                  <a-select-option v-for="item in driverClassList_BD" :value="item" :key="item">{{
                    item
                  }}</a-select-option>
                </a-select>
              </a-form-model-item>
              <a-form-model-item label="URL" prop="url">
                <a-input v-model="formData.url" placeholder="输入URL" />
              </a-form-model-item>
            </div>
          </div>
          <a-form-model-item label="URL" prop="url" v-show="formData.sourceType == '1'">
            <a-input
              v-model="formData.url"
              placeholder="jdbc:mysql://192.168.110.228:3306/test?useUnicode=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai"
              v-if="formData.driverClassName == 'com.mysql.cj.jdbc.Driver'"
            />
            <a-input
              v-model="formData.url"
              placeholder="jdbc:oracle:thin:@192.168.110.228:1524/xe"
              v-else-if="formData.driverClassName == 'oracle.jdbc.driver.OracleDriver'"
            />
            <a-input v-model="formData.url" placeholder="输入URL" v-else />
          </a-form-model-item>
        </a-form-model>
        <div class="btn">
          <a-button type="danger" @click="formInit">重置</a-button>
          <a-button type="primary" @click="handleSubmit">保存</a-button>
        </div>
      </div>
      <div v-else class="info">
        <a-spin :spinning="loading" size="large">
          <a-descriptions bordered :column="1">
            <a-descriptions-item label="类型">
              {{ warehouseInformation.sourceType == "0" ? "大数据平台" : "JDBC" }}
            </a-descriptions-item>
            <a-descriptions-item label="ID">
              {{ warehouseInformation.id }}
            </a-descriptions-item>
            <a-descriptions-item label="用户名">
              {{ warehouseInformation.username }}
            </a-descriptions-item>
            <a-descriptions-item label="密码">
              {{ warehouseInformation.password }}
            </a-descriptions-item>
            <template v-if="warehouseInformation.sourceType == '0'">
              <a-descriptions-item label="URL">
                {{ warehouseInformation.url }}
              </a-descriptions-item>
              <a-descriptions-item label="驱动名称">
                {{ warehouseInformation.authMethod }}
              </a-descriptions-item>
            </template>
            <template v-else>
              <a-descriptions-item label="驱动名称">
                {{ warehouseInformation.driverClassName }}
              </a-descriptions-item>
              <a-descriptions-item label="URL">
                {{ warehouseInformation.url }}
              </a-descriptions-item>
            </template>
          </a-descriptions>
        </a-spin>
      </div>
    </div>
  </div>
</template>

<script>
// import { validateSpecialFont } from "../../libs/validate";
// function validateSpecialFont(rule, value, callback) {
//   const reg = new RegExp("^[a-zA-Z][a-zA-Z0-9_-]*$");
//   if (value == "" || value == undefined || value == null) {
//     callback(new Error("必填字符不可为空"));
//   } else {
//     if (!reg.test(value)) {
//       callback(new Error("请输入正确字符"));
//     } else {
//       callback();
//     }
//   }
// }
const url = "/zuul/lmanage";
export default {
  name: "init",
  data() {
    return {
      formData: {
        username: "",
        password: "",
        isAudit: false,
        sourceType: "0",
        authMethod: undefined,
        driverClassName: undefined,
        url: ""
      },
      isJDBC: false,
      ruleValidate: {
        // name: [
        //   { required: true, message: "必填", trigger: "change" },
        //   { validator: validateSpecialFont, trigger: "change" }
        // ],
        username: [{ required: true, message: "必填", trigger: "change" }],
        password: [{ required: true, message: "必填", trigger: "change" }],
        sourceType: [{ required: true, message: "必填", trigger: "change" }],
        authMethod: [{ required: true, message: "必填", trigger: "change" }],
        typeName: [{ required: true, message: "必填", trigger: "change" }],
        url: [{ required: true, message: "必填", trigger: "change" }]
      },
      driverClassList: ["com.mysql.cj.jdbc.Driver", "oracle.jdbc.driver.OracleDriver"],
      driverClassList_BD: ["org.apache.hive.jdbc.HiveDriver"],
      isItInitialized: Boolean,
      warehouseInformation: {
        name: "",
        sourceType: "",
        id: "",
        authMethod: "",
        createdTime: ""
      },
      typeNameListOfJDBC: ["oracle", "mysql"],
      typeNameListOfBD: ["hive", "hbase"],
      loading: false
    };
  },
  methods: {
    typeChange(value) {
      this.isJDBC = !!(value * 1);
      this.formInit();
      console.log(this.formData);
      console.log(this.isJDBC);
      if (this.isJDBC) {
        this.ruleValidate = {
          username: [{ required: true, message: "必填", trigger: "change" }],
          password: [{ required: true, message: "必填", trigger: "change" }],
          sourceType: [{ required: true, message: "必填", trigger: "change" }],
          driverClassName: [{ required: true, message: "必填", trigger: "change" }],
          url: [{ required: true, message: "必填", trigger: "change" }],
          typeName: [{ required: true, message: "必填", trigger: "change" }]
        };
      } else {
        this.ruleValidate = {
          username: [{ required: true, message: "必填", trigger: "change" }],
          password: [{ required: true, message: "必填", trigger: "change" }],
          sourceType: [{ required: true, message: "必填", trigger: "change" }],
          authMethod: [{ required: true, message: "必填", trigger: "change" }],
          typeName: [{ required: true, message: "必填", trigger: "change" }],
          url: [{ required: true, message: "必填", trigger: "change" }]
        };
      }
    },
    diverClassNameChange(value) {
      console.log(value);
      // this.formData.driverClassName = value;
      console.log(this.formData);
    },
    testing() {
      this.$http({
        url: "/zuul/lmanage/dataSource/connectTest",
        params: {
          driverClassName: this.formData.driverClassName,
          username: this.formData.username,
          password: this.formData.password,
          url: this.formData.url
        },
        method: "get"
      }).then(res => {
        console.log(res);
        if (res.data.success) {
          this.$notification.success({
            message: "测试成功"
          });
        } else {
          this.$notification.error({
            message: "测试失败"
          });
        }
      });
    },
    formInit() {
      this.formData = {
        username: "",
        password: "",
        url: "",
        sourceType: this.formData.sourceType,
        authMethod: undefined,
        driverClassName: undefined,
        typeName: undefined
      };
    },
    handleSubmit() {
      this.$refs.formModel.validate(valid => {
        if (valid) {
          // 发送请求....
          // this.$router.push("data-manage-source");
          this.$http({
            method: "post",
            headers: {
              "Content-Type": "application/json"
            },
            data: this.formData,
            url: "/zuul/lmanage/dataWarehouse/save"
          }).then(res => {
            if (res.data.success) {
              this.$notification.success({
                message: "初始化成功"
              });
            } else {
              this.$notification.error({
                message: "初始化失败"
              });
            }
            location.reload();
          });
        }
      });
    },
    //查询数据仓库是否存在 如果存在 显示仓库信息 否则显示表单页面
    warehouseHasNo() {
      this.loading = true;
      this.$http({
        method: "get",
        url: "/zuul/lmanage/dataWarehouse/dict"
      }).then(res => {
        console.log(res);
        if (res.data.success) {
          if (res.data.data.length) {
            this.isItInitialized = true;
            this.$http.get("/zuul/lmanage/dataWarehouse/page").then(res => {
              console.log(res.data.data.results[0]);
              this.warehouseInformation = res.data.data.results[0];
              console.log(this.warehouseInformation);
              this.loading = false;
            });
          } else {
            this.isItInitialized = false;
            this.loading = false;
          }
        } else {
          this.$message.error("查询数据仓库失败");
          this.loading = false;
        }
      });
    }
  },
  mounted() {
    this.warehouseHasNo();
    // console.log(this.$parent.$parent);
  }
};
</script>

<style scoped lang="less">
.init {
  position: relative;
  width: 1600px;
  height: 740px;
  background-image: url("./assets/image/bg2.png");
  background-repeat: no-repeat;
  background-size: 100% 100%;
  margin: 60px auto;
  .form {
    width: 500px;
    background-color: #fff;
    // margin: 150px auto;
    border-radius: 10px;
    padding: 20px;
    position: absolute;
    top: 150px;
    left: 1000px;
    .btn {
      text-align: center;
      button {
        margin-right: 5px;
      }
    }
    .btn_connect {
      position: absolute;
      top: 37px;
      right: 0px;
      height: 30px;
    }
  }
  .info {
    width: 600px;
    position: absolute;
    left: 900px;
    top: 200px;
  }
}
.title {
  font-weight: bolder;
  margin-left: 1000px;
  @font-face {
    font-family: "PMZD";
    src: url("./assets/font/PangMenZhengDaoBiaoTiTi-1.ttf");
  }
  position: relative;
  font-family: "PMZD";
  span:first-child {
    font-size: 40px;
    color: rgba(22, 137, 255, 0.8);
    position: absolute;
    left: 21%;
    top: 75px;
    // margin-top: 50px;
    z-index:1;
  }
  span:last-child {
    font-size: 56px;
    color: #e6edfd;
    // margin-top: 50px;
    position: absolute;
    left: 8%;
    top: 40px;
  }
}
 .form .ant-form-item{
   margin-bottom: 40px;
 }
 /deep/.info .ant-descriptions-item-label{
   font-size: 14px;
   color: #C1BFBF;
   text-align: center;
 }
/deep/.info .ant-descriptions-item-content{
   font-size: 18px;
   color: #9D9D9D;
   text-align: center;
 }
</style>
