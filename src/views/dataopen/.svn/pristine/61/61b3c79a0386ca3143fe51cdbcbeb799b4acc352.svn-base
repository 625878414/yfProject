<template>
  <div class="dataopen-api-tag">
    <div class="page-content-body">
      <div class="les-table-toolbar">
        <a-button-group>
          <a-button type="primary" @click="add" icon="plus">新增</a-button>
          <a-button type="danger" @click="multiDelete" icon="delete">删除</a-button>
        </a-button-group>
        <div>
          <a-input v-model="searchConditions.name" placeholder="名称" :maxLength=32
                   style="width: 200px;margin-right: 5px" allowClear @change="handleSearch">
          </a-input>
        </div>
      </div>
      <div class="">
        <a-skeleton :loading="skeletonLoading" :paragraph="{ rows: 20 }" active style="background-color: white">
          <div class="row-content">
            <a-row type="flex" justify="start" align="middle" :gutter="[16,32]">
              <a-col :span="4" v-for="(item,index) in initTable" :key="index">
                <a-card :title="item.name" hoverable style="width: 300px">
                  <template slot="actions" class="ant-card-actions">
                    <a-checkbox :checked="item.checked" @click="toggleChecked(item.id)" @change="onChange(item.id)"/>
                    <a-icon key="edit" type="edit" @click="edit(item.id)"/>
                    <a-icon key="ellipsis" type="delete" @click="del(item.id)"/>
                  </template>
                  <p>card content</p>
                </a-card>
              </a-col>
            </a-row>
            <div class="pagination-bottom">
              <a-pagination
                :default-current="1"
                :current="current"
                :total="total"
                :page-size="18"
                :show-total="total => `共 ${total} 条`"
                :hideOnSinglePage="true"
                @change="onPageChange"/>
            </div>
          </div>
        </a-skeleton>
      </div>
    </div>

    <a-modal
      class="les-drawer-form"
      :title=drawerTitle
      :width="500"
      :visible="visible"
      :body-style="{ paddingBottom: '80px' }"
      ok-text="保存"
      @ok="save"
      @cancel="onClose">
      <a-form-model :form="formDrawer" :layout="vertical"
                    ref="ruleForm"
                    :model="formData"
                    :rules="formRules">
        <a-form-model-item label="名称" prop="name">
          <a-input v-model="formData.name" clearable :maxLength="30" placeholder="最多输入30个字符"/>
        </a-form-model-item>
      </a-form-model>
    </a-modal>
  </div>
</template>

<script>
  export default {
    name: "tag",
    data() {
      return {
        vertical: 'vertical',
        formDrawer: this.$form.createForm(this),
        visible: false,
        saveLoading: false,
        skeletonLoading: false,
        loading: false,
        drawerTitle: "新增",
        searchConditions: {
          size: 18,
          page: 0,
          name: '',
        },
        // pagination: {
          total: 0,
          current: 1,//当前页数
          size: "middle",
          hideOnSinglePage: true,//只有一页时是否隐藏分页器
          pageSize: 18,//每页条数
        // },
        selectedRows: [],
        initTable: [],
        formData: {
          name: "",
        },
        formRules: {
          name: [{ required: true, message: '必填', trigger: 'change' }],
        },
        newObject:{
          checked: true,
          createBy: null,
          createDate: "",
          delFlag: "",
          id: "",
          name: "",
          sort: 0,
          updateBy: null,
          updateDate: "",
        },
      }
    },
    methods:{
      //查询
      renderTable() {
        this.loading = true;
        this.$http({
          url: '/zuul/api-management/tag',
          method: "get",
          params: this.searchConditions
        }).then(res => {
          if (true) {
            var data = res.data.data.results;
            this.total = res.data.data.total;
            if (data.length > 0) {
              this.initTable = data;
              this.initTable.forEach((item, index) => {
                item.checked = false;
              })
            } else {
              this.initTable = [];
              this.$message.info('暂无数据');
            }
          } else {
            this.$message.error('查询错误');
            this.initTable = [];
          }
          this.loading = false;
          this.skeletonLoading = false;
        });
      },
      handleSearch() {
        this.current = 1;
        this.searchConditions.page = 0;
        this.selectedRows = [];
        this.renderTable();
      },
      //显示新增表单
      add() {
        this.drawerTitle = "新增";
        this.resetFormParams();
        this.visible = true;
      },
      //修改
      edit(id) {
        this.drawerTitle = "修改";
        this.resetFormParams();
        this.visible = true;
        this.$http({
          url: '/zuul/api-management/tag/' + id,
          method: 'get',
        }).then(result => {
          if (result.data.success) {
            this.formData = result.data.data;
          }
        })
      },
      //保存
      save() {
        this.$refs['ruleForm'].validate(valid => {
          if (valid) {
            this.$http({
              url: "/zuul/api-management/tag/",
              method: "post",
              data: this.formData
            }).then(res => {
              if (res.data.success) {
                this.$message.success('保存成功');
                this.visible = false;
                this.handleSearch();
              } else {
                this.$message.error('保存失败');
              }
              this.saveLoading = false;
            })
          }
        })
      },
      //单个删除
      del(id) {
        var _this = this;
        this.$confirm({
          title: '信息提示',
          content: '确定删除此条信息?',
          okText: '确定',
          okType: 'primary',
          cancelText: '取消',
          onOk() {
            _this.$http({
              url: '/zuul/api-management/tag/' + id,
              method: 'delete',
            }).then((result) => {
              if (result.data.success) {
                _this.$message.success("删除成功");
                _this.handleSearch();
              } else {
                _this.$message.error('删除失败');
              }
            })
          },
          onCancel() {
          },
        });
      },
      //批量删除
      multiDelete() {
        var _this = this;
        if (this.selectedRows.length === 0) {
          this.$message.warning("请至少选择一项");
        } else {
          this.$confirm({
            title: '信息提示',
            content: '确定删除?',
            okText: '确定',
            okType: 'primary',
            cancelText: '取消',
            onOk() {
              _this.$http({
                url: "/zuul/api-management/tag/",
                method: "delete",
                data: _this.selectedRows
              }).then(res => {
                if (res.data.success) {
                  _this.$message.success("删除成功");
                  _this.handleSearch()
                } else {
                  _this.$message.error('删除失败');
                }
              })
            },
            onCancel() {
            },
          });
        }
      },
      //关闭抽屉
      onClose() {
        this.visible = false;
        this.$refs["ruleForm"].resetFields();
      },
      //重置新增表单
      resetFormParams() {
        this.formData = {
          name: "",
        }
      },
      //分页change
      onPageChange(currents) {
        const current = currents;
        const pageSize = this.pageSize;
        this.current = currents;
        this.searchConditions.page = currents - 1;
        this.searchConditions.size =  this.pageSize;
        this.renderTable();
      },
      //多选
      onChange(id) {
        if(this.selectedRows.length > 0){
          let newArr = this.selectedRows.filter( (item,i) =>{
            return item == id
          } )
          if(newArr.length == 0){
            this.selectedRows.push(id);
          }else {
            this.selectedRows = this.selectedRows.filter( (item,i) =>{
              return item != id
            } )
          }
        }   else{
          this.selectedRows.push(id);
        }
      },
      toggleChecked(id) {
        let _this = this;
        _this.initTable.forEach((item, index) => {
          if(item.id == id){
            item.checked = !item.checked;
            this.newObject = item
            this.$set(this.initTable,index,this.newObject)
          };
        })
      },
    },
    mounted() {
      this.skeletonLoading = true;
      this.renderTable();
    },
  }
</script>

<style scoped lang="less">
  .dataopen-api-tag{
    body{
      background-color: white
    }

    .row-content{
      padding: 20px 20px 20px 20px;
    }

    .pagination-bottom {
      margin-top: 20px;
      margin-left: 80%;
    }
  }
</style>
