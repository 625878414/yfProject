<template>
  <div class="dataopen-api-category">
    <div class="page-content-body">
      <div class="les-table-toolbar">
        <a-button-group>
          <a-button type="primary" @click="add" icon="plus">新增</a-button>
          <!--<a-button type="danger" @click="" icon="delete">删除</a-button>-->
        </a-button-group>
        <div>
          <!--<a-input v-model="searchConditions.name" placeholder="名称" :maxLength=32-->
          <!--style="width: 200px;margin-right: 5px" allowClear @change="handleSearch">-->
          <!--</a-input>-->
        </div>
      </div>
      <div class="page-table-frame">
        <a-skeleton :loading="skeletonLoading" :paragraph="{ rows: 20 }" active style="background-color: white">
          <a-table :columns="columns"
                   :data-source="initTable"
                   :rowKey="record => record.id" :loading="loading" size="middle"
                   :pagination="pagination"
                   >
            <!--:row-selection="{ selectedRowKeys: selectedRowKeys,selectedRows: selectedRows, onChange: onSelectChange }"-->
            <!--@change="handleTableChange"-->
            <template slot="action" slot-scope="text, record">
              <a-button-group>
                <a-button type="primary" size="small" @click="edit(record.id)">
                  修改
                </a-button>
                <a-button type="warning" size="small" @click="showDrawer(record)">类目配置</a-button>
                <a-button type="danger" size="small" @click="del(record.id)">
                  删除
                </a-button>
              </a-button-group>
            </template>
          </a-table>
        </a-skeleton>
      </div>
    </div>

    <a-modal
      class="les-drawer-form"
      :title=modalTitle
      :width="500"
      :zIndex="2000"
      :visible="visible"
      :body-style="{ paddingBottom: '80px' }"
      @ok="save"
      ok-text="保存"
      @cancel="onClose">
      <a-form-model :form="formDrawer" :layout="vertical"
                    ref="ruleForm"
                    :model="formData"
                    :rules="formRules">
        <a-form-model-item label="名称" prop="name">
          <a-input v-model="formData.name" clearable :maxLength="32" placeholder="最多输入32个字符"/>
        </a-form-model-item>
        <a-form-model-item label="排序" prop="">
          <a-input-number v-model="formData.sort" :min="0" :max="9999" :step="1" style="width: 453px"/>
        </a-form-model-item>
      </a-form-model>
    </a-modal>

    <a-drawer
      title="类目列表"
      :width="620"
      :visible="listDrawer"
      :body-style="{ paddingBottom: '40px' }"
      @close="listDrawerOnClose"
    >
      <div class="toolbar">
        <a-space>
          <a-button type="primary"  icon="plus" @click="add">
            新增
          </a-button>
          <!--<div class="right">-->
            <!--<a-input v-model="searchConditions.name" icon="search" @change="handleSearch" placeholder="名称" style="width: 150px;margin-left:5px" allowClear></a-input>-->
          <!--</div>-->
        </a-space>
      </div>
      <a-table :columns="dictColumns"
               :data-source="dictTables"
               :row-key="record => record.id"
               size="middle"
               :pagination="false">
        <!--<template slot="label" slot-scope="text, record, index" >-->
          <!--<a-input v-if="record.editable" style="margin: -5px 0;" :value="text" @change="e => handleChange(e.target.value, record.id, 'name')" />-->
          <!--<template v-else>-->
            <!--{{ text }}-->
          <!--</template>-->
        <!--</template>-->
        <!--<template slot="order" slot-scope="text, record, index" >-->
          <!--<a-input v-if="record.editable" style="margin: -5px 0;" :value="text" @change="e => handleChange(e.target.value, record.id, 'sort')" />-->
          <!--<template v-else>-->
            <!--{{ text }}-->
          <!--</template>-->
        <!--</template>-->
        <!--<template slot="operation" slot-scope="text, record, index">-->
          <!--<div>-->
            <!--<a-space v-if="record.editable">-->
              <!--<a-button type="primary" size="small" @click="() => saveConfigure(record.id)">保存</a-button>-->
              <!--<a-popconfirm title="确定取消？" @confirm="() => cancel(record.id)">-->
                <!--<a-button type="danger" size="small">取消</a-button>-->
              <!--</a-popconfirm>-->
            <!--</a-space>-->
            <!--<a-space v-else>-->
              <!--<a-button type="primary" size="small" :disabled="editingKey !== ''" @click="() => editItem(record.id)">修改</a-button>-->
              <!--<a-popconfirm title="确定删除？" @confirm="() => delItem(record.id)">-->
                <!--<a-button type="danger" size="small" :disabled="editingKey !== ''">删除</a-button>-->
              <!--</a-popconfirm>-->
            <!--</a-space>-->
          <!--</div>-->
        <!--</template>-->

        <template slot="operation" slot-scope="text, record, index">
          <a-button-group>
            <a-button type="primary" size="small" @click="edit(record.id)">修改</a-button>
            <a-button type="danger" size="small" @click="del(record.id)">删除</a-button>
          </a-button-group>
        </template>
      </a-table>
    </a-drawer>

  </div>
</template>

<script>
export default {
  name: "category",
  data() {
    return {
      vertical: 'vertical',
      formDrawer: this.$form.createForm(this),
      visible: false,
      saveLoading: false,
      skeletonLoading: false,
      loading: false,
      modalTitle: "新增",
      searchConditions: {
        name: '',
      },
      pagination: {
        total: 0,
        current: 1,//当前页数
        size: "middle",
        hideOnSinglePage: true,//只有一页时是否隐藏分页器
        pageSize: 100000,//每页条数
        showTotal: total => `共 ${total} 条`,
        showSizeChanger: true,
        pageSizeOptions: ['15', '25', '50', '100'],
      },
      selectedRows: [],
      selectedRowKeys: [],
      initTable: [],
      columns: [
        {
          title: '名称',
          dataIndex: 'name',
          align:'left',
          width: 540
        },{
          title: '排序',
          dataIndex: 'sort',
          align:'center',
          width: 220,
        },
        {
          title: '操作',
          align:'center',
          dataIndex: 'action',
          scopedSlots: {customRender: 'action'},
          width: 200,
        }
      ],
      formData: {
        name: "",
        parentId: "",
        sort: 0,
      },
      formRules: {
        name: [{ required: true, message: '必填', trigger: 'change' }],
        // route: [{ required: true, message: '必填', trigger: 'change' }],
      },

      listDrawer: false,
      dictTables: [],
      cacheData: [],
      selectedItem: {},
      editingKey: '',
      dictColumns: [
        {
          title: '名称',
          dataIndex: 'name',
          key: 'name',
          scopedSlots: { customRender: 'name' },
        }, {
          title: '排序',
          width: 120,
          dataIndex: 'sort',
          key: 'sort',
          scopedSlots: { customRender: 'sort' },
        }, {
          title: '操作',
          width: 140,
          dataIndex: 'operation',
          key: 'operation',
          scopedSlots: { customRender: 'operation' },
        },
      ],
    }
  },
  methods:{
    handleSearch() {
      this.renderTable();
    },
    //查询
    renderTable() {
      this.loading = true;
      this.$http({
        url: '/zuul/api-management/category',
        method: "get",
        params: this.searchConditions
      }).then(res => {
        if (true) {
          let data = res.data.data;
          // this.pagination.total = res.data.data.total;
          // data.length > 0
          if (data.length > 0) {
            for (var i in data) {
              if(data[i].children.length == 0){
                delete data[i].children
              }else {
                let obj = data[i].children;
                for (var j in obj){
                  if(obj[j].children.length == 0){
                    delete obj[j].children
                  }else {
                    let objs = obj[j].children
                    for (var k in objs){
                      delete objs[k].children
                    }
                  }
                }
              }
            }
            this.initTable = data;
          } else {
            this.initTable = [];
            this.$message.info('暂无数据');
          }
        } else {
          this.$message.error('查询错误');
          this.initTable = [];
        }
        this.loading = false;
        this.skeletonLoading = false;
      });
    },
    //显示新增表单
    add() {
      this.modalTitle = "新增";
      this.resetFormParams();
      this.visible = true;
    },
    //修改
    edit(id) {
      this.modalTitle = "修改";
      this.resetFormParams();
      this.visible = true;
      this.$http({
        url: '/zuul/api-management/category/' + id,
        method: 'get',
      }).then(result => {
        if (result.data.success) {
          this.formData = result.data.data;
        }
      })
    },
    //保存
    save() {
      this.$refs['ruleForm'].validate(valid => {
        if(JSON.stringify(this.selectedItem) != '{}'){
          this.formData.parentId = this.selectedItem.id;
        }
        if (valid) {
          this.$http({
            url: "/zuul/api-management/category/",
            method: "post",
            data: this.formData
          }).then(res => {
            if (res.data.success) {
              this.$message.success('保存成功');
              this.visible = false;
              if(JSON.stringify(this.selectedItem)=='{}'){
                this.renderTable();
              }else {
                this.renderDrawerTable(this.selectedItem.id)
                this.selectedItem == {};
              }
            } else {
              this.$message.error('保存失败');
            }
            this.saveLoading = false;
          })
        }
      })
    },
    //单个删除
    del(id) {
      var _this = this;
      this.$confirm({
        title: '信息提示',
        content: '确定删除此条信息?',
        okText: '确定',
        okType: 'primary',
        cancelText: '取消',
        onOk() {
          _this.$http({
            url: '/zuul/api-management/category/' + id,
            method: 'delete',
          }).then((result) => {
            if (result.data.success) {
              _this.$message.success("删除成功");
              if(JSON.stringify(_this.selectedItem)=='{}'){
                _this.renderTable();
              }else {
                _this.renderDrawerTable(_this.selectedItem.id)
                _this.selectedItem == {};
              }
            } else {
              _this.$message.error('删除失败');
            }
          })
        },
        onCancel() {
        },
      });
    },
    //关闭抽屉
    onClose() {
      this.visible = false;
      this.$refs["ruleForm"].resetFields();
    },
    //重置新增表单
    resetFormParams() {
      this.formData = {
        name: "",
        parentId: "",
        sort: "",

      }
    },
    //表格复选框change方法
    onSelectChange(selectedRowKeys, selectedRows) {
      this.selectedRows = [];
      if (selectedRows.length > 0) {
        for (let i = 0; i < selectedRows.length; i++) {
          this.selectedRows.push(selectedRows[i].id);
        }
      }
      this.selectedRowKeys = selectedRowKeys;
    },
    //分页change
    handleTableChange(pagination, filters, sorter) {
      const pager = {...this.pagination};
      pager.current = pagination.current;
      pager.pageSize = pagination.pageSize;
      this.searchConditions.page = pagination.current - 1;
      this.searchConditions.size =  pager.pageSize;
      this.pagination = pager;
      this.renderTable();
    },

    //配置抽屉
    showDrawer(item) {
      this.selectedItem = item
      this.listDrawer = true
      this.renderDrawerTable(item.id)
    },
    renderDrawerTable(id) {
      this.$http({
        url: '/zuul/api-management/category/' + id,
        method: 'get'
      }).then(result => {
        if (result.data.success) {
          //console.log(result.data.data)
          let obj = result.data.data.children
          for (var i in obj) {
            delete obj[i].children
          }
          this.dictTables = obj
          this.cacheData = result.data.data.children
        }
      })
    },
    handleChange(value, id, column) {
      const newData = [...this.dictTables];
      const target = newData.filter(item => id === item.id)[0];
      if (target) {
        target[column] = value;
        this.dictTables = newData;
      }
    },
    listDrawerOnClose() {
      this.listDrawer = false;
      this.selectedItem = {};
      this.renderTable();
    },
    //配置保存
    saveConfigure(id) {
      const newData = [...this.dictTables];
      const newCacheData = [...this.cacheData];
      const target = newData.filter(item => id === item.id)[0];
      const targetCache = newCacheData.filter(item => id === item.id)[0];
      if (target) {
        this.$http({
          url: '/zuul/api-management/category',
          method: 'post',
          data: target
        }).then(result => {
          if (result.data.success) {
            this.renderDrawerTable(this.selectedItem)
          }
        })
      }
      this.editingKey = '';
    },
    cancel(id) {
      const newData = [...this.cacheData];
      const target = newData.filter(item => id === item.id)[0];
      this.editingKey = '';
      if (target) {
        Object.assign(target, this.cacheData.filter(item => id === item.id)[0]);
        delete target.editable;
        this.dictTables = newData;
      } else {
        this.dictTables = newData;
      }
    },
    addItem() {
      let target = {}
      target = {
        name: "",
        parentId: this.selectedItem.id,
        sort: 0,
        editable:true,
      },
      target.editable = true;
      this.editingKey = target.id;
      this.dictTables = [target, ...this.dictTables];
    },
    editItem(id) {
      const newData = [...this.dictTables];
      console.log("newData",newData)
      const target = newData.filter(item => id === item.id)[0];
      console.log(target)
      this.editingKey = id;
      if (target) {
        target.editable = true;
        this.dictTables = newData;
      }
    },
    delItem(id) {
      this.$http({
        url: '/api-management/category/' + id,
        method: 'delete'
      }).then(result => {
        if (result.data.success) {
          this.renderDrawerTable(this.selectedItem)
        }
      })
    },
  },
  mounted() {
    this.skeletonLoading = true;
    this.renderTable();
  }
}
</script>

<style scoped>

</style>
