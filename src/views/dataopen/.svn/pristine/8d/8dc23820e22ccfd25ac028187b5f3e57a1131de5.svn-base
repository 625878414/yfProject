<template>
    <div class="dataopen-api-category">
        <div class="page-content-body">
            <div class="toolbar">
                <a-button type="primary" @click="add" icon="plus">新增</a-button>
            </div>
            <div class="page-table-frame">
                <a-skeleton :loading="skeletonLoading" :paragraph="{ rows: 20 }" active style="background-color: white">
                    <a-table :columns="columns"
                             :data-source="initTable"
                             :rowKey="record => record.id" :loading="loading" size="middle"
                             :pagination="pagination"
                    >
                        <template slot="action" slot-scope="text, record">
                            <a-space>
                                <a-button type="primary" size="small" @click="edit(record.id)">
                                    修改
                                </a-button>
                                <a-button type="danger" size="small" @click="del(record.id)">
                                    删除
                                </a-button>
                            </a-space>
                        </template>
                    </a-table>
                </a-skeleton>
            </div>
        </div>

        <a-modal
            class="les-drawer-form"
            :title=modalTitle
            :width="400"
            :visible="visible"
            @ok="save"
            ok-text="保存"
            cancelText="关闭"
            @cancel="onClose">
            <a-form-model :form="formDrawer" :layout="vertical"
                          ref="ruleForm"
                          :model="formData"
                          :rules="formRules">
                <a-form-model-item label="名称" prop="name">
                    <a-input v-model="formData.name" clearable :maxLength="32" placeholder="最多输入32个字符"/>
                </a-form-model-item>
                <a-form-model-item label="排序" prop="">
                    <a-input-number v-model="formData.sort" :min="0" :max="9999" :step="1" />
                </a-form-model-item>
            </a-form-model>
        </a-modal>
    </div>
</template>

<script>
export default {
    name: "category",
    data() {
        return {
            vertical: 'vertical',
            formDrawer: this.$form.createForm(this),
            visible: false,
            saveLoading: false,
            skeletonLoading: false,
            loading: false,
            modalTitle: "新增",
            searchConditions: {
                name: '',
            },
            pagination: {
                total: 0,
                current: 1,//当前页数
                size: "middle",
                hideOnSinglePage: true,//只有一页时是否隐藏分页器
                pageSize: 100000,//每页条数
                showTotal: total => `共 ${total} 条`,
                showSizeChanger: true,
                pageSizeOptions: ['15', '25', '50', '100'],
            },
            selectedRows: [],
            selectedRowKeys: [],
            initTable: [],
            columns: [
                {
                    title: '名称',
                    dataIndex: 'name',
                    align: 'left',
                    width: 540
                }, {
                    title: '排序',
                    dataIndex: 'sort',
                    align: 'center',
                    width: 220,
                },
                {
                    title: '操作',
                    align: 'center',
                    dataIndex: 'action',
                    scopedSlots: {customRender: 'action'},
                    width: 200,
                }
            ],
            formData: {
                name: "",
                parentId: "",
                sort: 0,
            },
            formRules: {
                name: [{required: true, message: '必填', trigger: 'change'}],
                // route: [{ required: true, message: '必填', trigger: 'change' }],
            },
            cacheData: [],
            selectedItem: {},
        }
    },
    methods: {
        handleSearch() {
            this.renderTable();
        },
        //查询
        renderTable() {
            this.loading = true;
            this.$http({
                url: '/zuul/api-management/category',
                method: "get",
                params: this.searchConditions
            }).then(res => {
                if (true) {
                    let data = res.data.data;
                    // this.pagination.total = res.data.data.total;
                    // data.length > 0
                    if (data.length > 0) {
                        for (var i in data) {
                            if (data[i].children.length == 0) {
                                delete data[i].children
                            } else {
                                let obj = data[i].children;
                                for (var j in obj) {
                                    if (obj[j].children.length == 0) {
                                        delete obj[j].children
                                    } else {
                                        let objs = obj[j].children
                                        for (var k in objs) {
                                            delete objs[k].children
                                        }
                                    }
                                }
                            }
                        }
                        this.initTable = data;
                    } else {
                        this.initTable = [];
                        this.$message.info('暂无数据');
                    }
                } else {
                    this.$message.error('查询错误');
                    this.initTable = [];
                }
                this.loading = false;
                this.skeletonLoading = false;
            });
        },
        //显示新增表单
        add() {
            this.modalTitle = "新增";
            this.resetFormParams();
            this.visible = true;
        },
        //修改
        edit(id) {
            this.modalTitle = "修改";
            this.resetFormParams();
            this.visible = true;
            this.$http({
                url: '/zuul/api-management/category/' + id,
                method: 'get',
            }).then(result => {
                if (result.data.success) {
                    this.formData = result.data.data;
                }
            })
        },
        //保存
        save() {
            this.$refs['ruleForm'].validate(valid => {
                if (JSON.stringify(this.selectedItem) != '{}') {
                    this.formData.parentId = this.selectedItem.id;
                }
                if (valid) {
                    this.$http({
                        url: "/zuul/api-management/category/",
                        method: "post",
                        data: this.formData
                    }).then(res => {
                        if (res.data.success) {
                            this.visible = false;
                            this.renderTable();
                            this.$notification['success']({
                              message: "保存成功",
                              description: res.data.message,
                            });
                        } else {
                            this.$notification['error']({
                              message: "保存失败",
                              description: res.data.message,
                            });
                        }
                        this.saveLoading = false;
                    })
                }
            })
        },
        //单个删除
        del(id) {
            var _this = this;
            this.$confirm({
                title: '信息提示',
                content: '确定删除此条信息?',
                okText: '确定',
                okType: 'primary',
                cancelText: '取消',
                onOk() {
                    _this.$http({
                        url: '/zuul/api-management/category/' + id,
                        method: 'delete',
                    }).then((result) => {
                        if (result.data.success) {
                            _this.$message.success("删除成功");
                            _this.$notification['success']({
                                message: "保存成功",
                                description: result.data.message,
                            });
                            if (JSON.stringify(_this.selectedItem) == '{}') {
                                _this.renderTable();
                            } else {
                                _this.renderDrawerTable(_this.selectedItem.id)
                                _this.selectedItem == {};
                            }
                        } else {
                            _this.$notification['error']({
                                message: "删除失败",
                                description: result.data.message,
                            });
                        }
                    })
                },
                onCancel() {
                },
            });
        },
        //关闭抽屉
        onClose() {
            this.visible = false;
            this.$refs["ruleForm"].resetFields();
        },
        //重置新增表单
        resetFormParams() {
            this.formData = {
                name: "",
                parentId: "",
                sort: "",

            }
        },
        //表格复选框change方法
        onSelectChange(selectedRowKeys, selectedRows) {
            this.selectedRows = [];
            if (selectedRows.length > 0) {
                for (let i = 0; i < selectedRows.length; i++) {
                    this.selectedRows.push(selectedRows[i].id);
                }
            }
            this.selectedRowKeys = selectedRowKeys;
        },
        //分页change
        handleTableChange(pagination, filters, sorter) {
            const pager = {...this.pagination};
            pager.current = pagination.current;
            pager.pageSize = pagination.pageSize;
            this.searchConditions.page = pagination.current - 1;
            this.searchConditions.size = pager.pageSize;
            this.pagination = pager;
            this.renderTable();
        },
    },
    mounted() {
        this.skeletonLoading = true;
        this.renderTable();
    }
}
</script>

<style scoped>

</style>
